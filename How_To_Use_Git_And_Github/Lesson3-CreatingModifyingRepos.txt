lesson3

reflections:
how can you use the staging area to limit a commit to one logical change?
you can only add related files to the staging area and then commit them. If you are doing work on multiple things in one file then you are kind of out of luck.

BRANCHES!	
branch it when you are trying out a new feature.
the process of combing two branches is called merging
'git branch' just shows you all current branches
'git branch newBranchName' creates a new branch
'git checkout newBranchName' sets that branch to the one you are working on.

reflections:
what are some situations where branches could be helpful in keeping your history organized?
when doing big refactoring,
when trying something out that may or not be used in the final.
when trying somethign that may break a lot until it is finished.

branches for collaboration.
separate branches per feature allows each person to work independently, and get merge updates from master.

'git log --graph --oneline master coins' will help visualize the branching.

'detached head' message means you checked out a commit, not a branch. you can commit it to a branch with 'git checkout -b newBranchName' and that makes a new branch

reflection:
how do the diagrams help you visualize the branch structure?
well, they aren't great. But they are better than nothing. They help to quickly pin down the commits that branch out and merge back into other branches.

merging files
git needs 3 commits in order to do a merge. both branch heads, and the split commit.
'git gc' will do garbage collection, ie sporadically deleting unreachable commits
'git merge master coins'
You should have one of the two branches checked out before you run this, or whatever is checked out will also get merged in!

git diff can be weird when comparing adjacent commits on a merged branch because you can sometimes see two commits that aren't parents of each other.

'git show commitID' will show the changes compared to a commit's parent

'git branch -d coins' to delete a branch. Only do this after you have merged it into main. You aren't losing anything, just cleaning up the branch.

MERGE CONFLICT!!
cancel the merge by running 'git merge --abort'
it is unclear how to see what is causing the conflict, or how to fix it.

newlines are different between linux and windows
windows users should set this global attribute
'git config --global core.autocrlf true'

reflections:
what is the result of merging two branches together? Why do we represent it in the diagram the way we do?
merging two branches means that we combine the changes made in both branches into one codebase. We represent it the way we do so that we can remember / understand the important commits, the heads of both branches and the split commit that the branch started on (ie lasst common code)

git prefers to bring a conflict to your attention, letting the users choose which version to move forward with.

reflections:
what are the pros and cons of gits automatic merging vs always doing merges manually?
automatic is really nice when the edits are clear and there aren't conflicts.
manual is good when there are multiple interdependent changes going on.
they both have their place.

when there is a merge conflict, git sticks some code into the file that has the conflicts. Must that file be in the currently checked out repo / branch?

