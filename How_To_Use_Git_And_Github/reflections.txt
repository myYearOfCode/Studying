Reflections:
when would you like to use a remote repo vs keeping everything local?
Using a remote repo would be very useful when collaborating with other team members, 
when working on multiple machines, or when you are concerned about data loss on a single 
hard drive

lesson 4-22 What is the benefit of having a copy of the last known state of the remote stored locally?
it allows you to know the 'common ancestor' to make the auto merge go more smoothly.

lesson 4-25 How would you collaborate without using git or github? What would be easier, and what would be harder?
solo projects might be the easiest thing for non-version controlled software. fast-changing group projects would be the worst. It's probably really nice to be able to roll things back and see changes over time when debugging broken software.

lesson 4-31 When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
most of the time you should be working on a branch. That means less work if something doesn't pan out. you can simply delete or not merge the branch. If you were working on master and a feature did not end up working you would have to revert a lot of commits.
the benefits of working on master are speed and simplicity. small changes may be better when done in master, but probably not if it is a mission critical piece of software.
also, working directly in master is probably only feasible on solo projects because otherwise you would be working on a codebase that could change at any moment, and then you effectively become a branch anyways.

why might you want to always pull changes manually rather than having git automatically stay up to date with your remote repo?
I could see making the same or similar changes multiple times if I wasn't synched to the server. If the question is more about auto sync vs manual sync - it might be nice to have a stable version of the software to work on while building features. Once those features are more defined, commit them and work on the merge at that point. otherwise you may spend more time keeping up with the changes than making new features.

describe the differences between forks clones and branches. When would you use one instead of another?
forks only exist on github, and are the same as a clone from github to github.
clones are a local copy of either a remote or a different local repo
branches are a piece of one repo that has been separated so that people can work on adding a new feature.
