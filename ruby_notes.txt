for strings:
a string wrapped in single quotes won't replace #{} with the variable contents.
a string wrapped in double quotes will.

%{element} string formatting will look for the element in the brackets in a passed dict.

formatter = "%{first} %{second} %{third} %{fourth}" #string setup
puts formatter % {first: "one", second: "two", third: "three", fourth: "four"} #print and pass in dict

""" exists in ruby as well. pretend that everything is escaped until you hit the next """

=begin
My
multiline
comment
here
=end

escape sequences
\\	Backslash ()
\'	Single-quote (')
\"	Double-quote (")
\a	ASCII bell (BEL)
\b	ASCII backspace (BS)
\f	ASCII formfeed (FF)
\n	ASCII linefeed (LF)
\r	ASCII Carriage Return (CR)
\t	ASCII Horizontal Tab (TAB)
\uxxxx	Character with 16-bit hex value xxxx (Unicode only)
\v	ASCII vertical tab (VT)
\ooo	Character with octal value ooo
\xhh	Character with hex value hh

use ''' (single quotes) when you need a multi-line string that contains #{} formatting, but you don't want them to be processed yet or at all. Use """ (double quotes) for all other multi-line strings.

print doesn't add a newline to the end, puts does. this is useful for concatenating output and for input forms.

gets receives command line input,
chomp strips trailing whitespace
close -- Closes the file. Like File->Save.. in your editor.
read -- Reads the contents of the file. You can assign the result to a variable.
readline -- Reads just one line of a text file.
truncate -- Empties the file. Watch out if you care about the file.
write('stuff') -- Writes "stuff" to the file.
seek(0) -- Move the read/write location to the beginning of the file.gets.chomp.to_i can turn the input string into a number

how to open a file (make a file object)
target = open(file, 'w')
file open options
Mode |  Meaning
-----+--------------------------------------------------------
"r"  |  Read-only, starts at beginning of file  (default mode).
-----+--------------------------------------------------------
"r+" |  Read-write, starts at beginning of file.
-----+--------------------------------------------------------
"w"  |  Write-only, truncates existing file
     |  to zero length or creates a new file for writing.
-----+--------------------------------------------------------
"w+" |  Read-write, truncates existing file to zero length
     |  or creates a new file for reading and writing.
-----+--------------------------------------------------------
"a"  |  Write-only, starts at end of file if file exists,
     |  otherwise creates a new file for writing.
-----+--------------------------------------------------------
"a+" |  Read-write, starts at end of file if file exists,
     |  otherwise creates a new file for reading and
     |  writing.
-----+--------------------------------------------------------
"b"  |  Binary file mode (may appear with
     |  any of the key letters listed above).
     |  Suppresses EOL <-> CRLF conversion on Windows. And
     |  sets external encoding to ASCII-8BIT unless explicitly
     |  specified.
-----+--------------------------------------------------------
"t"  |  Text file mode (may appear with
     |  any of the key letters listed above except "b").

you can multiply strings out like this, but it HAS to be (string * integer) in that order.
"." * 10
>> ..........

you can check if a file exists with
File.exist?(filepath)

terminal stuff
echo "This is a test file." > test.txt //this writes text to a file
cat test.txt //this reads the text file

you can use ; to add multiple commands to one line.

function, two ways

def print_two(*args)
  arg1, arg2 = args
  puts "arg1: #{arg1}, arg2: #{arg2}"
end

def print_two_again(arg1, arg2)
  puts "arg1: #{arg1}, arg2: #{arg2}"
end

ri is the ruby documentation reader in terminal.
'ri file' will return docs on 'file'
'ri "File#seek"' will return docs on file and look for the seek section

ruby implicitly returns whatever is the last line of a function unless an explicit return statement is there.

HERE DOC
<<~END
this is a long multi line string that
  keeps it's formatting when printed
or passed. You can use any all caps word that isn't
present in the quote to open it and close it.
END

for loops
there are two different preferred ways to do for loops in ruby
one is wrapped in 'do' and 'end'
the other is wrapped in  { ... }

fruits.each do |fruit|
	puts "A fruit of type: #{fruit}"
end

VS

fruits.each |fruit| {
	puts "A fruit of type: #{fruit}"
}

# this is a different syntax on the preferred way
# stylistically ok, just different.
change.each {|i| puts "I got #{i}" }

range operator
(0..5)
with two periods it is inclusive of the end number
with three periods is is exclusive (ie doesn't include it in the output)

regex in ruby
choice =~ (/[0-9]+/)  #this returns a boolean

put stands for "put string" That almost makes sense!

You can insert _ into numbers to replace numbers (?)

classes are named in camelCase and functions (methods) are named in underscore format.
